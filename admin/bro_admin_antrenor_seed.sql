-- Seed pentru schema bro_antrenor rulat de catre bro_admin
grant select,references on bro_admin.antrenor to &&user_name;
grant references,select on bro_admin.echipament to &&user_name;
grant references on bro_admin.client to &&user_name;
grant references,select on bro_admin.chei_client to &&user_name;
grant execute on dbms_crypto to &&user_name;

create table &&user_name..program (
   id_program  number(*,0)
      generated by default on null as identity
      constraint pk_program primary key,
   descriere   varchar2(255),
   tip_program varchar2(20)
      constraint ck_program_tip_program not null
   check ( tip_program in ( 'CARDIO',
                            'MASS',
                            'RECOVERY' ) )
);

create table &&user_name..antrenament (
   id_client     number(*,0),
   id_program    number(*,0),
   id_echipament number(*,0),
   durata        number(3)
      constraint nn_antrenament_durata not null,
   constraint pk_antrenament primary key ( id_client,
                                           id_program,
                                           id_echipament ),
   constraint fk_antrenament_client foreign key ( id_client )
      references bro_admin.client ( id_client ),
   constraint fk_antrenament_program foreign key ( id_program )
      references &&user_name..program ( id_program ),
   constraint fk_antrenament_echipament foreign key ( id_echipament )
      references bro_admin.echipament ( id_echipament )
);

create or replace function &&user_name..cript_string (
   org    varchar2,
   mod_op pls_integer,
   cheie  raw
) return raw is
begin
   return dbms_crypto.encrypt(
      utl_i18n.string_to_raw(
         org,
         'AL32UTF8'
      ),
      mod_op,
      cheie
   );
end;
/


create or replace function &&user_name..decript_string (
   cript  raw,
   mod_op pls_integer,
   cheie  raw
) return varchar2 is
   result varchar2(4000);
begin
   result := utl_i18n.raw_to_char(
      dbms_crypto.decrypt(
         cript,
         mod_op,
         cheie
      ),
      'AL32UTF8'
   );

   if result is null
   or length(result) = 0 then
      return 'Not allowed';
   end if;
   return result;
exception
   when others then
      return 'Not allowed';
end;
/


create or replace function &&user_name..hash_checksum (
   input_array sys.odcivarchar2list
) return raw is
   concatenated_string varchar2(4000);
begin
   concatenated_string := '';
   for i in 1..input_array.count loop
      concatenated_string := concatenated_string || input_array(i);
   end loop;

   return dbms_crypto.hash(
      utl_i18n.string_to_raw(
         concatenated_string,
         'AL32UTF8'
      ),
      dbms_crypto.hash_md5
   );
end;
/


create or replace view &&user_name..client_antrenament as
   select cript_string(
      p.id_program,
      c.mod_op,
      c.cheie
   ) as id_program,
          cript_string(
             p.descriere,
             c.mod_op,
             c.cheie
          ) as descriere_program,
          cript_string(
             p.tip_program,
             c.mod_op,
             c.cheie
          ) as tip_program,
          cript_string(
             a.durata,
             c.mod_op,
             c.cheie
          ) as durata_antrenament,
          cript_string(
             e.id_echipament,
             c.mod_op,
             c.cheie
          ) as id_echipament,
          cript_string(
             e.nume,
             c.mod_op,
             c.cheie
          ) as nume_echipament,
          cript_string(
             e.data_instalare,
             c.mod_op,
             c.cheie
          ) as data_instalare_echipament,
          cript_string(
             e.data_revizie,
             c.mod_op,
             c.cheie
          ) as data_revizie_echipament,
          cript_string(
             e.id_filiala,
             c.mod_op,
             c.cheie
          ) as id_filiala,
          cript_string(
             a.id_client,
             c.mod_op,
             c.cheie
          ) as id_client,
          hash_checksum(sys.odcivarchar2list(
             p.id_program,
             p.descriere,
             p.tip_program,
             a.durata,
             e.id_echipament,
             e.nume,
             e.data_instalare,
             e.data_revizie,
             e.id_filiala,
             c.cheie
          )) as checksum
     from &&user_name..program p
     join &&user_name..antrenament a
   on p.id_program = a.id_program
     join bro_admin.echipament e
   on a.id_echipament = e.id_echipament
     join bro_admin.chei_client c
   on c.id_client = a.id_client;


create or replace function &&user_name..number_to_raw (
   n number
) return raw is
begin
   return hextoraw(to_char(
      n,
      'FM0X'
   ));
end;
/


create or replace type &&user_name..decrypted_client_record as object (
      id_program                varchar2(100),
      descriere_program         varchar2(2500),
      tip_program               varchar2(100),
      durata_antrenament        varchar2(50),
      id_echipament             varchar2(100),
      nume_echipament           varchar2(255),
      data_instalare_echipament varchar2(50),
      data_revizie_echipament   varchar2(50),
      id_filiala                varchar2(100),
      id_client                 varchar2(100),
      checksum                  raw(16)
);
/


create or replace type &&user_name..decrypted_client_table as
   table of &&user_name..decrypted_client_record;
/



create or replace function &&user_name..fetch_decrypted_client_data (
   p_mod_op    number,
   p_cheie     raw,
   p_id_client number
) return &&user_name..decrypted_client_table
   pipelined
is
begin
   for r in (
      select decript_string(
         ca.id_program,
         p_mod_op,
         p_cheie
      ) as id_program,
             decript_string(
                ca.descriere_program,
                p_mod_op,
                p_cheie
             ) as descriere_program,
             decript_string(
                ca.tip_program,
                p_mod_op,
                p_cheie
             ) as tip_program,
             decript_string(
                ca.durata_antrenament,
                p_mod_op,
                p_cheie
             ) as durata_antrenament,
             decript_string(
                ca.id_echipament,
                p_mod_op,
                p_cheie
             ) as id_echipament,
             decript_string(
                ca.nume_echipament,
                p_mod_op,
                p_cheie
             ) as nume_echipament,
             decript_string(
                ca.data_instalare_echipament,
                p_mod_op,
                p_cheie
             ) as data_instalare_echipament,
             decript_string(
                ca.data_revizie_echipament,
                p_mod_op,
                p_cheie
             ) as data_revizie_echipament,
             decript_string(
                ca.id_filiala,
                p_mod_op,
                p_cheie
             ) as id_filiala,
             decript_string(
                ca.id_client,
                p_mod_op,
                p_cheie
             ) as id_client,
             checksum
        from &&user_name..client_antrenament ca
       where regexp_like ( decript_string(
         ca.id_client,
         p_mod_op,
         p_cheie
      ),
                           '^\d+$' )
   ) loop
      pipe row ( decrypted_client_record(
         r.id_program,
         r.descriere_program,
         r.tip_program,
         r.durata_antrenament,
         r.id_echipament,
         r.nume_echipament,
         r.data_instalare_echipament,
         r.data_revizie_echipament,
         r.id_filiala,
         r.id_client,
         r.checksum
      ) );
   end loop;
   return;
end;
/

commit;

exit;