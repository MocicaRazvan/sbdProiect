----------------SYS----------------
--Privilegii admin
--sys_users_1.sql

GRANT
   CREATE SESSION
TO bro_admin;
GRANT
   CREATE ANY TABLE
TO bro_admin;
GRANT
   CREATE ANY VIEW
TO bro_admin;
GRANT
   CREATE ANY TRIGGER
TO bro_admin;
GRANT
   CREATE ANY PROCEDURE
TO bro_admin;

GRANT
   CREATE ANY SEQUENCE
TO bro_admin;

GRANT
   CREATE ANY INDEX
TO bro_admin;

GRANT
   CREATE ANY TYPE
TO bro_admin;

GRANT
   CREATE TYPE
TO bro_admin;
GRANT EXECUTE ON global_user_table TO bro_admin;

-- Pt proceduri
GRANT EXECUTE ON dbms_crypto TO bro_admin WITH GRANT OPTION;
--Pt generated by default on null as identity la create in antrenor
GRANT
   SELECT ANY SEQUENCE
TO bro_admin;
GRANT EXECUTE ON get_users_by_suffix TO bro_admin;


----------------SYS----------------
--Privilegii pentru admin, obiect dependent
--sys_admin_antrenor_privilege.sql


-- dupa ce admin a create tabelel pt antrenori
-- se dau privilegii doar pentru tabele existente
alter session set container = orclpdb;
create or replace procedure bro_admin_programs_privilegies is
   v_user  global_user_table := get_users_by_suffix('ANTRENOR');
   v_first boolean := true;
begin
   for i in 1..v_user.count loop
      dbms_output.put_line(v_user(i));
      begin
         execute immediate 'SELECT 1 FROM '
                           || v_user(i)
                           || '.program WHERE ROWNUM = 1';
         execute immediate 'grant select on '
                           || v_user(i)
                           || '.program to bro_admin with grant option';
         dbms_output.put_line('Giving select privileges on '
                              || v_user(i)
                              || '.program to bro_admin.');
         if v_first then
            v_first := false;
         end if;
      exception
         when others then
            dbms_output.put_line('Skipping '
                                 || v_user(i)
                                 || '.program as it does not exist.');
      end;
   end loop;

   if not v_first then
      dbms_output.put_line('Giving select privileges on program tables to bro_admin.');
   else
      dbms_output.put_line('No valid program tables found');
   end if;
end bro_admin_programs_privilegies;
/
   set SERVEROUTPUT ON;

exec bro_admin_programs_privilegies;





----------------SYS----------------
--Creare rolurilor si privilegiile de baza 
--sys_users_2.sql

alter session set container = orclpdb;
-- Dupa ce bro_admin a create tabele si a si inserat datele
-- Dupa ce bro_admin  a creat tabele si a si inserat datele pt bro_antrenor1..n
create role r_bro_public_general;
grant
   create session
to r_bro_public_general;
grant select on bro_admin.antrenor_extins to r_bro_public_general;
grant select on bro_admin.filiala to r_bro_public_general;
grant select on bro_admin.adresa to r_bro_public_general;
grant select on bro_admin.supliment to r_bro_public_general;

grant select on bro_admin.echipament to r_bro_public_general;
grant select on bro_antrenor1.program to r_bro_public_general;
grant select on bro_antrenor2.program to r_bro_public_general;
grant select on bro_antrenor3.program to r_bro_public_general;
grant r_bro_public_general to bro_public_general1;


-- roluri
-- antrenor
create role r_bro_antrenor;
grant r_bro_public_general to r_bro_antrenor;
grant select on bro_admin.client_extins to r_bro_antrenor;
grant select on bro_admin.telefon to r_bro_antrenor;
grant select on bro_admin.antrenor to r_bro_antrenor;
grant select on bro_admin.chei_client to r_bro_antrenor;
grant execute on bro_admin.select_random_from_nr_list to r_bro_antrenor;
grant
   create table,
   create view,
   create sequence,
   create procedure,
   create type
to r_bro_antrenor;
grant execute on dbms_crypto to r_bro_antrenor;



grant r_bro_antrenor to bro_antrenor1;
grant r_bro_antrenor to bro_antrenor2;
grant r_bro_antrenor to bro_antrenor3;



-- client
create role r_bro_client;
grant r_bro_public_general to r_bro_client;
grant select on bro_admin.client_extins to r_bro_client;
grant execute on bro_admin.get_client_key to r_bro_client;

-- fiecare antrenor da la clientii sai
grant execute on bro_antrenor1.fetch_decrypted_client_data to bro_client1;
grant execute on bro_antrenor1.hash_checksum to bro_client1;
grant execute on bro_antrenor1.fetch_decrypted_client_data to bro_client2;
grant execute on bro_antrenor1.hash_checksum to bro_client2;
grant execute on bro_antrenor1.fetch_decrypted_client_data to bro_client3;
grant execute on bro_antrenor1.hash_checksum to bro_client3;
--programul e public


grant r_bro_client to bro_client1;
grant r_bro_client to bro_client2;
grant r_bro_client to bro_client3;

--receptionist
create role r_bro_receptionist;
grant r_bro_public_general to r_bro_receptionist;
grant select,insert,update on bro_admin.client_extins to r_bro_receptionist;
grant select,insert,update on bro_admin.telefon to r_bro_receptionist;
grant select,insert,update on bro_admin.abonament to r_bro_receptionist;
grant select on bro_admin.tip_abonament to r_bro_receptionist;
grant select on bro_admin.furnizor to r_bro_receptionist;
grant insert on bro_admin.comanda to r_bro_receptionist;
grant insert on bro_admin.informatii_comanda to r_bro_receptionist;
grant select on bro_admin.aprovizionare to r_bro_receptionist;
--programul e public
grant r_bro_receptionist to bro_receptionist1;
grant r_bro_receptionist to bro_receptionist2;
grant r_bro_receptionist to bro_receptionist3;

--manager filiala 
create role r_bro_manager_filiala;
grant r_bro_public_general to r_bro_manager_filiala;
grant select on bro_admin.receptionist_extins to r_bro_manager_filiala;
grant select on bro_admin.client_extins to r_bro_manager_filiala;
grant select on bro_admin.furnizor to r_bro_manager_filiala;

grant select on bro_antrenor1.program to r_bro_manager_filiala;
--pt fiecare antrenor in filiala sa
grant select on bro_antrenor1.antrenament to r_bro_manager_filiala;
grant select on bro_antrenor2.antrenament to r_bro_manager_filiala;
grant select on bro_antrenor3.antrenament to r_bro_manager_filiala;

grant select,update,insert,delete on bro_admin.echipament to r_bro_manager_filiala;

grant select on bro_admin.aprovizionare to r_bro_manager_filiala;
grant r_bro_manager_filiala to bro_manager_filiala1;



----------------BRO ADMIN----------------
--Privilegii pentru antrenor la seed date de admin
--bro_admin_antrenor_seed.sql

grant select,references on bro_admin.antrenor to &&user_name;
grant references,select on bro_admin.echipament to &&user_name;
grant references on bro_admin.client to &&user_name;
grant references,select on bro_admin.chei_client to &&user_name;
grant execute on dbms_crypto to &&user_name;


----------------BRO ADMIN----------------
--Privilegii date de admin la rolul de baza pentru obiectul dependent
--bro_admin_programs_view.sql

declare
   users sys.global_user_table;
begin
   users := sys.get_users_by_suffix('ANTRENOR');
   for i in 1..users.count loop
      dbms_output.put_line(users(i));
   end loop;
end;
/
create or replace procedure bro_admin_programs_view is
   v_user  sys.global_user_table := sys.get_users_by_suffix('ANTRENOR');
   v_sql   clob := 'CREATE OR REPLACE VIEW programs_view AS ';
   v_first boolean := true;
begin
   for i in 1..v_user.count loop
      begin
         -- check existance of program table for antrenor
         execute immediate 'SELECT 1 FROM '
                           || v_user(i)
                           || '.program WHERE ROWNUM = 1';
         if v_first then
            v_sql := v_sql
                     || 'SELECT '''
                     || v_user(i)
                     || ''' AS antrenor, id_program, descriere, tip_program FROM '
                     || v_user(i)
                     || '.program';
            v_first := false;
         else
            v_sql := v_sql
                     || ' UNION ALL SELECT '''
                     || v_user(i)
                     || ''' AS antrenor, id_program, descriere, tip_program FROM '
                     || v_user(i)
                     || '.program';
         end if;

      exception
         when others then
            -- skip if table its not in antrenor
            dbms_output.put_line('Skipping '
                                 || v_user(i)
                                 || '.program as it does not exist.');
      end;
   end loop;
   dbms_output.put_line(v_sql);
   if not v_first then
      execute immediate v_sql;
      dbms_output.put_line('View programs_view created successfully.');
   else
      dbms_output.put_line('No valid program tables found. View not created.');
   end if;
end bro_admin_programs_view;
/
exec bro_admin_programs_view;


-- poate da grant la role, desi nu vede rolurile
--SELECT role FROM dba_roles WHERE role = 'R_BRO_PUBLIC_GENERAL';
grant select on bro_admin.programs_view to r_bro_public_general;
