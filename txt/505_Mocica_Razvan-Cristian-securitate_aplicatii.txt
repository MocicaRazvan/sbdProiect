----------------SYS----------------
--Contextul aplicatiei si VPD
--sys_context.sql

alter session set container = orclpdb;
--creare contextului
create or replace procedure bro_context_proc is
begin
   if regexp_like(
      upper(user),
      '^BRO_ADMIN'
   ) then
      dbms_session.set_context(
         'bro_context',
         'id_filiala',
         -1
      ); -- pentru a lasa adminul in pace
   elsif regexp_like(
      upper(user),
      '^BRO_MANAGER_FILIALA[0-9]+$'
   ) then
      dbms_session.set_context(
         'bro_context',
         'id_filiala',
         regexp_substr(
            user,
            'BRO_MANAGER_FILIALA([0-9]+)',
            1,
            1,
            null,
            1
         )
      );
   end if;
end;
/
drop context bro_context;
create context bro_context using bro_context_proc;

--trigger pt a popula contextul
create or replace trigger manager_id_filiala_trg
   after logon on database begin
      bro_context_proc();
   end;
/


-- fiecare manager face dml pe filiala lui
create or replace function manager_echipament_management_policy (
   schema_name in varchar2,
   table_name  in varchar2
) return varchar2 is
   v_id_filiala int := sys_context(
      'bro_context',
      'id_filiala'
   );
begin
   if v_id_filiala = -1 then
      return ''; -- pentru a lasa adminul in pace
   else
      return 'id_filiala = ' || v_id_filiala;
   end if;
end;
/
begin
   dbms_rls.add_policy(
      object_schema   => 'BRO_ADMIN',
      object_name     => 'ECHIPAMENT',
      policy_name     => 'MANAGER_ECHIPAMENT_POLICY',
      function_schema => 'SYS',
      policy_function => 'manager_echipament_management_policy',
      statement_types => 'INSERT, UPDATE, DELETE',
      update_check    => true,
      enable          => true
   );
end;
/


-- begin
--    dbms_rls.drop_policy(
--       object_schema => 'BRO_ADMIN',
--       object_name   => 'ECHIPAMENT',
--       policy_name   => 'MANAGER_ECHIPAMENT_POLICY'
--    );
-- end;
-- /

-- fiecare manager vede istoric cu leagatura la filiala lui
create or replace function audit_echipament_policy (
   schema_name in varchar2,
   table_name  in varchar2
) return varchar2 as
   v_id_filiala int := sys_context(
      'bro_context',
      'id_filiala'
   );
begin
   if upper(user) = upper(schema_name) then
      return ''; -- pentru a lasa adminul in pace
   else
      return '
        (TREAT(old_values AS bro_admin.t_echipament).id_filiala = '
             || v_id_filiala
             || ' OR TREAT(new_values AS bro_admin.t_echipament).id_filiala = '
             || v_id_filiala
             || ')';
   end if;
end audit_echipament_policy;
/

begin
   dbms_rls.add_policy(
      object_schema   => 'bro_admin',
      object_name     => 'audit_echipament',
      policy_name     => 'AUDIT_MANAGER_ECHIPAMENT_POLICY',
      function_schema => 'SYS',
      policy_function => 'audit_echipament_policy',
      statement_types => 'SELECT',
      update_check    => true,
      enable          => true
   );
end;
/

-- begin
--    dbms_rls.drop_policy(
--       object_schema => 'BRO_ADMIN',
--       object_name   => 'audit_echipament',
--       policy_name   => 'AUDIT_MANAGER_ECHIPAMENT_POLICY'
--    );
-- end;
-- /


SELECT *
FROM dba_policies
where object_owner like upper('bro%');



----------------MANAGER 1----------------
--Testare contextul aplicatiei si VPD in manager
--bro_manager_filiala1_context.sql

select sys_context(
      'bro_context',
      'id_filiala'
   ) from dual;
   
   
select distinct id_filiala from bro_admin.echipament;

update bro_admin.echipament o
   set
   nume = (
      select nume
        from bro_admin.echipament i
       where i.id_echipament = o.id_echipament
   )
 where o.id_filiala = 1;
 
update bro_admin.echipament o
   set
   nume = (
      select nume
        from bro_admin.echipament i
       where i.id_echipament = o.id_echipament
   )
 where o.id_filiala != 1;
 
 update bro_admin.echipament o
   set
   nume = (
      select nume
        from bro_admin.echipament i
       where i.id_echipament = o.id_echipament
   );
   
   
select count(*)
  from bro_admin.audit_echipament a
  where a.old_values.id_filiala=1 or  a.old_values.id_filiala=1;
  
select count(*)
  from bro_admin.audit_echipament a
  where a.old_values.id_filiala!=1 and  a.old_values.id_filiala!=1;



----------------ANTRENOR 1----------------
--SQL Injection. Functia vulnerabila si cea safe
--bro_antrenor1_sql_injection.sql

CREATE OR REPLACE PROCEDURE get_program_full (
   id_prg    NUMBER,
   data_inst VARCHAR2
) IS
   TYPE program_echipament_rec IS RECORD (
         id_echipament  bro_admin.echipament.id_echipament%TYPE,
         nume           bro_admin.echipament.nume%TYPE,
         data_instalare bro_admin.echipament.data_instalare%TYPE,
         data_revizie   bro_admin.echipament.data_revizie%TYPE,
         id_filiala     bro_admin.echipament.id_filiala%TYPE,
         id_furnizor    bro_admin.echipament.id_furnizor%TYPE,
         id_program     program.id_program%TYPE,
         descriere      program.descriere%TYPE,
         tip_program    program.tip_program%TYPE
   );
   TYPE program_echipament_tab IS
      TABLE OF program_echipament_rec;
   v_program_echipament program_echipament_tab;
   v_sql                VARCHAR2(2500) := 'SELECT * FROM bro_admin.echipament e 
                        NATURAL JOIN program p
                        WHERE p.id_program = '
                           || id_prg
                           || ' AND upper(to_char(data_revizie, ''DD-MON-YY'')) LIKE ''%'
                           || upper(data_inst)
                           || '%''';
BEGIN
   dbms_output.put_line('SQL: ' || v_sql);
   EXECUTE IMMEDIATE v_sql
   BULK COLLECT
     INTO v_program_echipament;
   dbms_output.put_line('Program and Equipment Details:');
   dbms_output.new_line();
   FOR i IN 1..v_program_echipament.count LOOP
      dbms_output.put_line('ID_ECHIPAMENT: '
                           || v_program_echipament(i).id_echipament
                           || ', NUME: '
                           || v_program_echipament(i).nume
                           || ', DATA_INSTALARE: '
                           || to_char(
         v_program_echipament(i).data_instalare,
         'YYYY-MM-DD'
      )
                           || ', DATA_REVIZIE: '
                           || to_char(
         v_program_echipament(i).data_revizie,
         'YYYY-MM-DD'
      )
                           || ', ID_FILIALA: '
                           || v_program_echipament(i).id_filiala
                           || ', ID_FURNIZOR: '
                           || v_program_echipament(i).id_furnizor
                           || ', ID_PROGRAM: '
                           || v_program_echipament(i).id_program
                           || ', DESCRIERE: '
                           || v_program_echipament(i).descriere
                           || ', TIP_PROGRAM: '
                           || v_program_echipament(i).tip_program);
      dbms_output.new_line();
   END LOOP;
EXCEPTION
   WHEN no_data_found THEN
      dbms_output.put_line('No data found for the specified program ID: ' || id_prg);
   WHEN OTHERS THEN
      dbms_output.put_line('An error occurred running get_program_full: ' || sqlerrm);
END;
/

GRANT EXECUTE ON get_program_full TO bro_client1;
/
-- sql injection fix

CREATE OR REPLACE PROCEDURE get_program_full_safe  (
   id_prg    NUMBER,
   data_inst VARCHAR2
) IS
  TYPE program_echipament_rec IS RECORD (
         id_echipament  bro_admin.echipament.id_echipament%TYPE,
         nume           bro_admin.echipament.nume%TYPE,
         data_instalare bro_admin.echipament.data_instalare%TYPE,
         data_revizie   bro_admin.echipament.data_revizie%TYPE,
         id_filiala     bro_admin.echipament.id_filiala%TYPE,
         id_furnizor    bro_admin.echipament.id_furnizor%TYPE,
         id_program     program.id_program%TYPE,
         descriere      program.descriere%TYPE,
         tip_program    program.tip_program%TYPE
   );
    TYPE program_echipament_tab IS TABLE OF program_echipament_rec;
   v_program_echipament program_echipament_tab;
   v_sql VARCHAR2(2500) := 'SELECT 
                                 e.id_echipament, 
                                 e.nume, 
                                 e.data_instalare, 
                                 e.data_revizie, 
                                 e.id_filiala, 
                                 e.id_furnizor, 
                                 p.id_program, 
                                 p.descriere, 
                                 p.tip_program
                             FROM bro_admin.echipament e 
                             NATURAL JOIN program p
                             WHERE p.id_program = :id_prg
                               AND UPPER(TO_CHAR(e.data_revizie, ''DD-MON-YY'')) LIKE :data_inst';
BEGIN
   dbms_output.put_line('Executing SQL: ' || v_sql);

   EXECUTE IMMEDIATE v_sql BULK COLLECT
      INTO v_program_echipament
      USING id_prg, '%' || upper(data_inst) || '%';

   dbms_output.put_line('Program and Equipment Details:');
   dbms_output.new_line();

   FOR i IN 1 .. v_program_echipament.count LOOP
      dbms_output.put_line('ID_ECHIPAMENT: ' || v_program_echipament(i).id_echipament ||
                           ', NUME: ' || v_program_echipament(i).nume ||
                           ', DATA_INSTALARE: ' || to_char(v_program_echipament(i).data_instalare, 'YYYY-MM-DD') ||
                           ', DATA_REVIZIE: ' || to_char(v_program_echipament(i).data_revizie, 'YYYY-MM-DD') ||
                           ', ID_FILIALA: ' || v_program_echipament(i).id_filiala ||
                           ', ID_FURNIZOR: ' || v_program_echipament(i).id_furnizor ||
                           ', ID_PROGRAM: ' || v_program_echipament(i).id_program ||
                           ', DESCRIERE: ' || v_program_echipament(i).descriere ||
                           ', TIP_PROGRAM: ' || v_program_echipament(i).tip_program);
      dbms_output.new_line();
   END LOOP;

EXCEPTION
   WHEN no_data_found THEN
      dbms_output.put_line('No data found for the specified program ID: ' || id_prg);
   WHEN OTHERS THEN
      dbms_output.put_line('An error occurred running get_program_full: ' || sqlerrm);
END;
/

GRANT EXECUTE ON get_program_full_safe TO bro_client1;


----------------Client 1----------------
--SQL Injection. Apeluri pentru functia vulnerabila si cea safe
--bro_client1_sql_injection.sql

set serveroutput on;
-- apel onest
exec bro_antrenor1.get_program_full(1,'may');

--apel care intoarce toate programele cu echipamente, subminand filtrarea
exec bro_antrenor1.get_program_full(1,'may%'' OR 1=1 --');

--apel care intorace toate antrenamentele, desi clientul nu are drept de select pe tabela antrenament

select * from bro_antrenor1.antrenament;

exec bro_antrenor1.get_program_full(1, 'may%'' UNION SELECT ID_ECHIPAMENT, ''Injectat'', SYSDATE, SYSDATE, ID_CLIENT, DURATA, ID_PROGRAM, ''Injectat Desc'', ''Tip injectat'' FROM ANTRENAMENT --');

begin
     bro_antrenor1.get_program_full(1, 'may%'' UNION SELECT ID_ECHIPAMENT, ''Injectat'', 
                                     SYSDATE, SYSDATE, ID_CLIENT, DURATA, ID_PROGRAM, 
                                     ''Injectat Desc'', ''Tip injectat'' FROM ANTRENAMENT --');
end;
/

-- repetam cu safe 

-- apel onest
exec bro_antrenor1.get_program_full_safe(1,'may');

--apel care intoarce toate programele cu echipamente, subminand filtrarea
exec bro_antrenor1.get_program_full_safe(1,'may%'' OR 1=1 --');


exec bro_antrenor1.get_program_full_safe(1, 'may%'' UNION SELECT ID_ECHIPAMENT, ''Injectat'', SYSDATE, SYSDATE, ID_CLIENT, DURATA, ID_PROGRAM, ''Injectat Desc'', ''Tip injectat'' FROM ANTRENAMENT --');


begin
     bro_antrenor1.get_program_full_safe(1, 'may%'' UNION SELECT ID_ECHIPAMENT, ''Injectat'', 
                                     SYSDATE, SYSDATE, ID_CLIENT, DURATA, ID_PROGRAM, 
                                     ''Injectat Desc'', ''Tip injectat'' FROM ANTRENAMENT --');
end;
/